OBJS=klayers_rtp.o \
   rdinfo_klayers.o  opnrtp_klayers.o  rdrtp_klayers.o  wrtrtp_klayers.o \
   rdafgl.o  merge.o  intlev.o  integ.o  grav.o  wexsvp.o  setxop.o \
   spline.o  splint.o  spllev.o  wrtspl.o  cbplev.o  adafgl.o \
   cbgids.o  util_klayers.o  chkgas.o  chkguc.o  cbgucs.o  toppmv.o  zbot.o

########################################################################
# # --------
# # HDF info
# # --------
# # set HDFHOME to point to the local HDF installation
# HDFHOME = /asl/opt
# # HDF libraries
# HDFLIB   = -L$(HDFHOME)/lib -lmfhdf -ldf -ljpeg -lz
# 
# HDFHOME = /usr/ebuild/software/HDF/4.2.14-GCCcore-8.3.0
# HDFINC = -I$(HDFHOME)/include/hdf
# HDFLIB = -L$(HDFHOME)/lib -ldf
#  
# # -----------
# # RTP info
# # -----------
# # set RTPHOME to point to the local RTP installation
# RTPHOME = ../../rtpV201
# RTPHOME = /home/sergio/git/rtp/rtpV221/
# 
# # RTP library
# RTPLIB = -L$(RTPHOME)/lib -lrtp
# 
# # RTP include files
# RTPINC = -I$(RTPHOME)/include

########################################################################

################### Paul has split things post Aug 2015
# HDF_INSTALL1 = /asl/opt/hdf/4.2r4
# HDFLIB1   = -L$(HDF_INSTALL1)/lib -ldf -ljpeg -lz       ## -lmfhdf
# 
# # more libs
# HDF_INSTALL2 = /asl/opt/szip/2.1
# HDFLIB2   = -L$(HDF_INSTALL2)/lib -lsz -L/usr/lib64/libsz.so.2
# 
# HDFLIB = $(HDFLIB1) $(HDFLIB2)
# 

HDFHOME = /usr/ebuild/software/HDF/4.2.14-GCCcore-8.3.0
HDFINC = -I$(HDFHOME)/include/hdf
HDFLIB = -L$(HDFHOME)/lib -ldf

# ---------
# RTP flags
# ---------
# RTPLIB : point this to the lib you created in RTP/Src_rtp
#
# linux
# these are gases 1 .. 63
# RTPLIB = -L/asl/packages/rtpV105/lib -lrtp#
# these are gases 1 .. 63 plus clouds 201 - 203
# RTPLIB = -L/asl/packages/rtpV105_4500/lib -lrtp
#
### rtpV201 on taro.umbc.edu for g80, use this this works <<<<<<<<<<<<<<
### rtpV201 on taro.umbc.edu for g80, use this this works <<<<<<<<<<<<<<
#RTPHOME = /asl/packages/rtpV201_g80
#RTPLIB = -L$(RTPHOME)/lib -lrtp
### rtpV201 on taro.umbc.edu for g80, use this this works <<<<<<<<<<<<<<
### rtpV201 on taro.umbc.edu for g80, use this this works <<<<<<<<<<<<<<
#
### rtpV201 on taro.umbc.edu, 16 gases
#RTPHOME = /asl/packages/rtpV201
RTPHOME = /home/sergio/SARTA_CLOUDY_RTP_KLAYERS_NLEVELS/KLAYERS_RTPv221_150levs_120km/rtpV221/
RTPHOME = /home/sergio/SARTA_CLOUDY_RTP_KLAYERS_NLEVELS/KLAYERS_RTPv221_150levs_120km/rtpV201/
RTPLIB = -L$(RTPHOME)/lib -lrtp
RTPINC = -I$(RTPHOME)/include
RTPDEFS_FILE = $(RTPHOME)/include/rtpdefs.f
#
########################################################################

# -------------
# FORTRAN flags
# -------------
# OPT  : compiler options
# FLIB : fortran libraries (most compilers will not need any)
# F77  : fortran compiler

# -------
# Generic
#
OPT = -O
FLIB =
F77 = f77

# ------------
# Linux Absoft
#    -N109 fold all names to upper case
#    -C    check array bounds
#    -O    some optimizations
#    -N3   add record info to unformatted files
#    -s    static allocation
# OPT = -N109 -C -O -N3 -s
# OPT = -O
OPT = -s -O -N3 -N26
# Linux Absoft needs -lU77
FLIB = -lU77
F77 = /asl/opt/absoft/absoft10.0/bin/af77

# -----
# SunOS options
#
# OPT= -e -fast -w
# FLIB =
# F77 = f77

# ---
# SGI
# include -cpp option if not default 
# OPT= -O0 -static -g -check_bounds -64
#OPT= -O -64
#FLIB = -64
#F77 = f77

#----
F77 = ifort
OPT = -O 
FLIB = 
OPT =  -check noarg_temp_created -implicitnone -msse2 -extend-source 132 -O1 -names lowercase -check bounds -assume nounderscore -heap-arrays -g -traceback -debug inline-debug-info -check all -fp-stack-check -diag-disable 8291 -mcmodel=medium

# -----
# Build
# -----

# Link object files and libs to build executable
klayers: $(OBJS)
	$(F77) $(OBJS)  $(RTPLIB) $(HDFLIB) $(FLIB)

# compile source to object files
.f.o: incLAY.f cbplev.f
	$(F77) $(RTPINC) -c $(OPT) $*.f
