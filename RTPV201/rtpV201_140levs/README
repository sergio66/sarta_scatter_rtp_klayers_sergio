
                    RTP C and Fortran Tools
                    -----------------------

                            V2.01
              H. Motteler with updates by S.Hannon
                       13 July 2010


Introduction
-------------

This package contains procedures to read and write RTP (Radiative
Transfer Profile) format files from C and Fortran.  See rtpspec.pdf
in the "doc" directory for more info on the RTP format and on the
Fortran and C programming interface.  Matlab RTP tools are included
in the "h4tools" directory; which has its own documentation.


Building the Distribution
--------------------------

To build the RTP package you need to have HDF 4 installed; this
is available from The HDF Group at
    http://www.hdfgroup.org/
RTP has been tested on Linux, SGI, and Sun systems, with HDF4.1r3,
r4, and r5; 64 bit IRIX may require r4 or r5.

To build the RTP library and utilities, untar the distribution
and edit the top level Makefile to set HDFHOME to the local HDF4
installation.  You may also need to change some of the compiler
parameters.  Then type "make"; the top level makefile will enter
each of the subdirectories src, test, and utils.

If the library builds successfully, cd into the "test" subdir
and run the test programs: rtptest1, rtptest2, pvtest, ftest1,
and ftest2; they do not require any user input on the command
line. The programs display some info about the codes ability
to read and write data to RTP files. Error messages will appear
if something goes wrong.  There are sample screen dump files
in the test subdir for comparison to your screen output.

Include files:
-------------

The include subdir contains the include files used by the library
and test and utils programs.  If you chose to increase some of the
array maximum sizes in rtp.h and rtpdefs.f, you need to be be aware
that there is a 51200 byte limit on the total record size of the
header and profile records. This limit is an HDF4 limitation and
there is no getting around it. You can check the sizes of the header
and profile records using test program "rtpsize".  When making
changes, be careful to keep rtpdefs.f in agreement with rtp.h.

As delivered the "standard" include files are set up for
MAXCHAN=4231 and MAXGAS=16.  These values were selected for
use with IASI, CrIS, and AIRS fast radiative transfer codes.
It is impossible to fit all 8461 IASI channels into one RTP,
so this MAXCHAN was chosen to allow IASI to be split into
two RTP files. 

An alternate set of "g80" include files are also contained in
the include directory with MAXGAS=80 and MAXCHAN=800.  The larger
value of MAXGAS may be useful for some applications, but the
smaller value of MAXCHAN makes it inconvenient for use with most
hyperspectral instruments.  To compile using the "g80" variant,
delete the existing symbolic links for the "standard" include
files and replace with with new links for the "g80" files.



Reading and Writing RTP Data
-----------------------------

The Fortran API consists of four routines: rtpopen.f, rtpread.f,
rtpwrite.f, and rtpclose.f; a brief description of parameters and
actions is given at the beginning of each file, and in rtpspec.pdf.
Fields are defined in rtpspec.pdf, and in rtp.h.

To use the RTP routines, C and Fortran programs need to link to
librtp.a, Fortran application programs need to include rtpdefs.f,
and C application need to include rtp.h.

The Fortran API uses static structures for header and profiles,
that include all the RTP fields.  Normally, only a subset of the
fields will be used, and the field size variables in the header
are used to determine what is actually read from or written to a
file.

The field set in the HDF file and the field set defined for the
Fortran structures do not have to match exactly, or be in the same
order.  On reads, unknown fields are ignored.  On writes, values
in the header (nemis, ngas, mlevs, nchan, and pfields) are
used to determine which fields are to be written; if a size is
zero, or if a field group is not specified with pfields, the
corresponding field or fields are left out of the file.


RTP Utilities
--------------

rtpdump is a basic dump tool for examining RTP files; it will print
out field sets, attributes, and header and profile data.

  USAGE

     rtpdump [-achp] [-n <k>] rtpfile

  OPTIONS

     -a      dump attributes
     -c      dump RTP channel info
     -h      dump header structure
     -p      dump profile structure
     -n <k>  select profile <k> for channel or profile 
           structure dumps; the first profile is 1

  BUGS

     the output is from debug and error dump routines and is not very
     fancy; the -p option only prints a subset of profile fields

There is also a simple "rtpsize" utility, that prints out structure
sizes and does some basic checks that the header and profile fields
match the field name and size list (the "flists").


HDF Utilities
--------------

RTP data is currently saved in the HDF 4 Vdata format, and can be
accessed and manipulated directly with HDF utilities.  For example,

    hdp dumpvd -h -c "RTP data" test1.hdf

will list the field set actually in the HDF Vdata file test1.hdf.
The utility "hdp" is part of the HDF 4 distribution.  "hdp dumpvd"
will give a short list of vdata dump options.  See the documentation
with the HDF distribution for more information.


RTP Files
----------

RTP Fortran interface

  rtpdefs.f     -- Fortran RTP structure definitions

  rtpopen.c     -- Fortran interface to open RTP files
  rtpread.c     -- Fortran interface to read an RTP profile
  rtpwrite.c    -- Fortran interface to write an RTP profile
  rtpclose.c    -- Fortran interface to close an RTP open channel
  rtpvers.c     -- Fortran interface to return the RTP version

  ftest1.f      -- Fortran read and write demo
  ftest2.f      -- Fortran read and write demo

RTP C interface

  rtp.h         -- RTP header and profile structures
  rtpfnx.h      -- RTP function prototypes 

  rtpread1.c    -- RTP read setup
  rtpread2.c    -- read HDF vdata into struct buffer
  rtpwrite1.c   -- RTP write setup
  rtpwrite2.c   -- write structure buffer to HDF vdata
  rtpclose1.c   -- detach and close
  gsplit.c      -- expand gamnt to a gas_<n> sublist
  getchan.c     -- find next free RTP channel
  rtphcheck     -- sanity check for RTP header values

  rtptest1.c    -- test RTP write new and read back in
  rtptest2.c    -- test RTP read existing, modify, and write

low level vdata routines

  pvfunc.h      -- pv ("profile vdata") function prototypes
  pvdefs.h      -- parameters and structures for reading HDF vdatas

  pvopen.c      -- open an HDF vdata file, start the VS interface
  pvread1.c     -- read vdata attributes, setup to read vdata data
  pvread2.c     -- read an HDF vdata, after the pvread1 setup
  pvread3.c     -- wrapper for VSdetach
  pvwrite1.c    -- vdata write setup
  pvwrite2.c    -- write an HDF vdata
  pvwrite3.c    -- detatch the vdata
  pvclose.c     -- stop the V interface and close the vdata file
  pvmatch.c     -- match vdata buffer to structure fields

  pvtest.c      -- test pvread and pvwrite family of functions

misc utilities

  dump_hstr.c   -- dump the header structure 
  dump_pstr.c   -- dump the profile structure
  dump_flist.c  -- dump an RTP field list
  dump_chan.c   -- dump info on an open RTP channel 
  dump_attrs.c  -- dump an RTP attribute list
  dump_vbuf.c   -- dump a vdata buffer

  rtpdump.c     -- basic RTP dump utility
  rtpsize.c     -- check and print out structure sizes

data files

  test4.hdf     -- 48 fitting profiles, used in some of the tests

